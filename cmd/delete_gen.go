// Code generated by gen/main.go; DO NOT EDIT.

package cmd

import (
	"context"
	"fmt"

	"cloud.google.com/go/bigquery/datatransfer/apiv1/datatransferpb"
	"github.com/auifzysr/yabqsqcli/pkg/config"
	"github.com/auifzysr/yabqsqcli/pkg/domain"
	"github.com/auifzysr/yabqsqcli/pkg/factory"
	"github.com/urfave/cli/v2"
)

func callDelete(ctx context.Context, cfg *config.DeleteConfig) (*datatransferpb.TransferConfig, error) {
	var err error
	var res *datatransferpb.TransferConfig

	tc, err := factory.DeleteTransferConfigFactory(cfg)
	if err != nil {
		return nil, err
	}
	err = client.DeleteTransferConfig(ctx, tc)
	if err != nil {
		return nil, fmt.Errorf("delete transfer failed: parent: %s, %w", fmt.Sprintf("projects/%s/locations/%s",
			cfg.ProjectID, cfg.Region,
		), err)
	}

	return res, nil
}

func delete(cfg *config.DeleteConfig) error {
	ctx := context.Background()
	if cfg.TransferConfigID == "" {
		lcfg := &config.ListConfig{
			RootConfig: cfg.GetRootConfig(),
		}
		res, err := callList(ctx, lcfg)
		if err != nil {
			return err
		}

		candidates := domain.FindTransferConfigIDByName(res, func(m *datatransferpb.TransferConfig) bool {
			return m.DisplayName == cfg.GetDisplayName()
		})

		switch len(candidates) {
		case 0:
			return fmt.Errorf("no such scheduled query: %s", cfg.GetDisplayName())
		case 1:
			tcid, err := domain.GetTransferConfigIDByName(candidates[0].Name)
			if err != nil {
				return err
			}
			cfg.TransferConfigID = tcid
		default:
			return fmt.Errorf("pick either of these: %+v", candidates)
		}
	}

	_, err := callDelete(ctx, cfg)
	if err != nil {
		return err
	}

	return nil
}

func deleteCommand(rootCfg *config.RootConfig) *cli.Command {
	cfg := &config.DeleteConfig{
		RootConfig: rootCfg,
	}

	return &cli.Command{
		Name:        "delete",
		Description: "delete scheduled query config",
		Action: func(cCtx *cli.Context) error {
			return delete(cfg)
		},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:        "config-id",
				Aliases:     []string{"c"},
				Value:       "",
				Usage:       "transfer config ID",
				Destination: &cfg.TransferConfigID,
			},
			&cli.StringFlag{
				Name:        "name",
				Aliases:     []string{"n"},
				Value:       "",
				Usage:       "name",
				Destination: &cfg.DisplayName,
			},
		},
	}
}
