package main

var cmdTemplate = `
// Code generated by gen/main.go; DO NOT EDIT.

package cmd

import (
	"context"
	"fmt"

	"github.com/auifzysr/yabqsqcli/pkg/config"
	"github.com/auifzysr/yabqsqcli/pkg/factory"
	"github.com/auifzysr/yabqsqcli/pkg/domain"
	"cloud.google.com/go/bigquery/datatransfer/apiv1/datatransferpb"
	"github.com/urfave/cli/v2"
)

{{- if .IsConfig }}
func call{{ .Name | capitalize }}(ctx context.Context, cfg *config.{{ .Name | capitalize }}Config) ({{- if .IsSlice }}[]{{- end }}*datatransferpb.{{ .APICallResponseTypeName }}, error) {
{{- else }}
func call{{ .Name | capitalize }}(ctx context.Context, cfg *config.{{ .Name | capitalize }}Config) ({{- if .IsSlice }}[]{{- end }}*datatransferpb.{{ .APICallResponseTypeName }}, error) {
{{- end }}
	var err error
	var res {{- if .IsSlice }}[]{{- end }}*datatransferpb.{{ .APICallResponseTypeName }}

	tc, err := factory.{{ .Name | capitalize }}TransferConfigFactory(cfg)
	if err != nil {
		return nil, err
	}
{{- if .IsItr }}
	itr := client.{{ .APICallFuncName }}(ctx, tc)
	for {
		m, err := itr.Next()
		if err != nil {
			break
		}
		res = append(res, m)
	}
{{- else }}
	{{ if ne .Name "delete" }}res, {{ end }}err = client.{{ .APICallFuncName }}(ctx, tc)
	if err != nil {
		return nil, fmt.Errorf("{{ .Name }} transfer failed: parent: %s, %w", fmt.Sprintf("projects/%s/locations/%s",
			cfg.ProjectID, cfg.Region,
		), err)
	}
{{- end }}

	return res, nil
}

func {{ .Name }}(cfg *config.{{ .Name | capitalize }}Config) error {
	ctx := context.Background()
    {{- if .CallResolver}}
	if cfg.TransferConfigID == "" {
		lcfg := &config.ListConfig{
			RootConfig: cfg.GetRootConfig(),
		}
		res, err := callList(ctx, lcfg)
		if err != nil {
			return err
		}

		candidates := domain.FindTransferConfigIDByName(res, func(m *datatransferpb.TransferConfig) bool {
			return m.DisplayName == cfg.GetDisplayName()
		})

		switch len(candidates) {
		case 0:
			return fmt.Errorf("no such scheduled query: %s", cfg.GetDisplayName())
		case 1:
			tcid, err := domain.GetTransferConfigIDByName(candidates[0].Name)
			if err != nil {
				return err
			}
			cfg.TransferConfigID = tcid
		default:
			return fmt.Errorf("pick either of these: %+v", candidates)
		}
	}
	{{- end}}

	{{ if eq .Name "delete"}}_, {{ else }}res, {{ end }}err := call{{ .Name | capitalize }}(ctx, cfg)
	if err != nil {
		return err
	}

	{{- if ne .Name "delete"}}
	o, err := domain.Format(res, cfg.OutputFormat)
	if err != nil {
		return err
	}
	fmt.Printf("%s", o)
	{{- end }}

	return nil
}

func {{ .Name }}Command(rootCfg *config.RootConfig) *cli.Command {
	cfg := &config.{{ .Name | capitalize }}Config{
		RootConfig: rootCfg,
	}

	return &cli.Command{
		Name:    "{{ .Name }}",
		Description:   "{{ .Name }} scheduled query config",
		Action: func(cCtx *cli.Context) error {
			return {{ .Name }}(cfg)
		},
		Flags: []cli.Flag{
		{{ .FlagTemplate }}
		},
	}
}
`
